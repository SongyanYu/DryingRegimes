library(RColorBrewer)
library(tidyverse)
library(patchwork)
library(viridis)
dat = read.csv('../data/metrics_by_event_combined.csv')
sev = ggplot(data=dat, aes(x = (scale(dry_dur)*scale(peak_quantile))/n,y=Name,group=paste(Name,CLASS),fill=Name,linetype=CLASS)) +
plot_lay()
sev
dat = dat %>% group_by(gage) %>% count() %>% left_join(dat,.,by="gage")
dat$n
sev = ggplot(data=dat, aes(x = (scale(dry_dur)*scale(peak_quantile))/n,y=Name,group=paste(Name,CLASS),fill=Name,linetype=CLASS)) +
plot_lay()
sev
### Load Data
dat = read.csv("../data/metrics_by_event_combined.csv")
dat$Name[dat$Name == "Ignore"] = "Mediterranean California"
dat = dat[dat$peak_quantile>.25,]
dat = dat %>% group_by(gage) %>% count() %>% left_join(dat,.,by="gage")
sev = ggplot(data=dat, aes(x = (scale(dry_dur)*scale(peak_quantile))/n,y=Name,group=paste(Name,CLASS),fill=Name,linetype=CLASS)) +
plot_lay()
sev
sev = ggplot(data=dat, aes(x = (scale(dry_dur)*scale(peak_quantile))/n,y=Name,group=paste(Name,CLASS),fill=Name,linetype=CLASS)) +
plot_lay()+xlim(-5,5)
sev
sev = ggplot(data=dat, aes(x = (scale(dry_dur)*scale(peak_quantile))/n,y=Name,group=paste(Name,CLASS),fill=Name,linetype=CLASS)) +
plot_lay()+xlim(-.5,.5)
sev
#Load metrics into R env
df<-read_csv(paste0('../data/metrics_by_event_combined.csv'))
#Libraries (for Windows OS)
library(parallel)
library(clustsig)
library(vegan)
library(lubridate)
library(tidyverse)
#Load metrics into R env
df<-read_csv(paste0('../data/metrics_by_event_combined.csv'))
#Load metrics into R env
df<-read.csv(paste0('../data/metrics_by_event_combined.csv'))
#Filter
df<-df %>%
filter(p_value<=0.1) %>%
filter(drying_rate>0)
dat$Name[dat$Name == "Ignore"] = "Mediterranean California"
dat = dat[dat$peak_quantile>.25,]
df$Name[df$Name == "Ignore"] = "Mediterranean California"
df = df[dat$peak_quantile>.25,]
#Filter
df<-df %>%
filter(p_value<=0.1) %>%
filter(drying_rate>0)
df$Name[df$Name == "Ignore"] = "Mediterranean California"
df = df[dat$peak_quantile>.25,]
df = df[df$peak_quantile>.25,]
#Rename event_id  (Somethign is weird here...)
df<-df %>%
mutate(event_id = seq(1, nrow(df)))
df = df %>% group_by(gage) %>% count() %>% left_join(df,.,by="gage")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Step 2: Estimate events per year ---------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Create fun to estimate number of drying events in the same meterologic year per event
fun<-function(n){
#Libraries of interest
library(dplyr)
#isolate event of interest
event <- df[n,]
#count number of events in same year and at same gage
count<- df %>%
filter(meteorologic_year == event$meteorologic_year) %>%
filter(gage == event$gage) %>%
nrow()
#Export info
tibble(
event_id = event$event_id,
freq_local = count
)
}
#run function
n.cores <- detectCores() - 1
cl <- makeCluster(n.cores)
clusterExport(cl, "df")
output<-parLapply(cl, seq(1,nrow(df)), fun)
remove(cl)
#add results to df
output<-bind_rows(output)
df<-left_join(df,output)
df
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Step 3: Cluster analysis -----------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create distance matrix with scaled vars
df$sev = df$freq_local/df$n
d <- df %>%
#Select vars of interest
select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "sev") %>%
#scale vars
scale() %>%
#Create distance matrix
vegdist(., method = 'euclidean')
#Use heirchal clustering
fit <- hclust(d, method = "ward")
hist(df$freq_local)
hist(df$n)
hist(df$sev)
View(df)
#Use heirchal clustering
fit <- hclust(d, method = "ward")
#Use heirchal clustering
fit <- hclust(d, method = "ward")
#After visual inspection, select where to cut the tree
df<- df %>%
mutate(
clust_3 = cutree(fit, k=4),
clust_6 = cutree(fit, k=6))
#Explore Cluster Analysis ------------------------------------------------------
plot(fit,
sub="Sampling Site",
hang=-0.5,
main = NULL,
labels = FALSE,
ylab="Height")
title("Cluster Analysis: Ward's Mimium Variance (Euclidean Distance)", line = 3, cex =2)
title("3 Groups & 6 Groups", line = 2)
rect.hclust(fit, k=4)
rect.hclust(fit, k=6)
d <- df %>%
#Select vars of interest
select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "freq_local") %>%
#scale vars
scale() %>%
#Create distance matrix
vegdist(., method = 'euclidean')
#Use heirchal clustering
fit <- hclust(d, method = "ward")
#After visual inspection, select where to cut the tree
df<- df %>%
mutate(
clust_3 = cutree(fit, k=3),
clust_6 = cutree(fit, k=6))
#Explore Cluster Analysis ------------------------------------------------------
plot(fit,
sub="Sampling Site",
hang=-0.5,
main = NULL,
labels = FALSE,
ylab="Height")
title("Cluster Analysis: Ward's Mimium Variance (Euclidean Distance)", line = 3, cex =2)
title("3 Groups & 6 Groups", line = 2)
rect.hclust(fit, k=3)
rect.hclust(fit, k=6)
#Explore 3 group clustering-----------------------------------------------------
#Box plots
#Graphing parameters (cause I wanna be fancy)
par(mfrow=c(2,3))
par(mar = c(2,4,0,0)+0.25)
par(ps=12)
par(cex.lab=14/12)
par(cex.axis = 10/12)
#Box plots
# plot(fit,
#      sub="Sampling Site",
#      hang=-0.5,
#      main = NULL,
#      labels = FALSE,
#      ylab="Height")
# rect.hclust(fit, k=3, border= c("#e41a1c","#377eb8", "#4daf4a"))
boxplot(peak2zero~clust_3, col=c("#e41a1c","#377eb8", "#4daf4a"), data=df, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
boxplot(drying_rate~clust_3,col=c("#e41a1c","#377eb8", "#4daf4a"), data=df, outline=F, ylab = "Drying Rate [day^-1]", xlab=NULL)
boxplot(dry_date_start~clust_3,col=c("#e41a1c","#377eb8", "#4daf4a"), data=df, outline=F, ylab = "Drying Date [julian day]", xlab=NULL)
boxplot(dry_dur~clust_3, data=df,col=c("#e41a1c","#377eb8", "#4daf4a"), outline=F, ylab = "Dry Duration [days]", xlab=NULL)
boxplot(peak_quantile~clust_3, data=df, col=c("#e41a1c","#377eb8", "#4daf4a"),outline=F, ylab = "Peak Flow [%]", xlab=NULL)
boxplot(freq_loca~clust_3, col=c("#e41a1c","#377eb8", "#4daf4a"), data=df, outline=F, ylab = "Drying Events", xlab=NULL)
#Explore 6 group clustering-----------------------------------------------------
#Box plots
#Graphing parameters (cause I wanna be fancy)
par(mfrow=c(2,3))
par(mar = c(2,4,0,0)+0.25)
par(ps=12)
par(cex.lab=14/12)
par(cex.axis = 10/12)
#Define cols
cols<-c("#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02")
#Box plots
plot(fit,
sub="Sampling Site",
hang=-0.5,
main = NULL,
labels = FALSE,
ylab="Height")
rect.hclust(fit, k=6, border= cols)
boxplot(peak2zero~clust_6, col=cols, data=df, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
boxplot(drying_rate~clust_6,col=cols, data=df, outline=F, ylab = "Drying Rate [day^-1]", xlab=NULL)
boxplot(dry_date_start~clust_6,col=cols, data=df, outline=F, ylab = "Drying Date [julian day]", xlab=NULL)
boxplot(dry_dur~clust_6, data=df,col=cols, outline=F, ylab = "Dry Duration [days]", xlab=NULL)
boxplot(peak_quantile~clust_6, data=df, col=cols,outline=F, ylab = "Peak Flow [%]", xlab=NULL)
dat.scale <- df %>%
#Select vars of interest
select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "sev") %>%
#scale vars
scale()
############## PCA ############
PCA = prcomp(dat.scale)
autoplot(PCA,loadings=T,loadings.label=T)
# Visualize eigenvalues/variances
fviz_screeplot(PCA, addlabels = TRUE, ylim = c(0, 50))
library(GGalley)
library(tidyverse)
library(mclust)
library(ggplot2)
library(mapdata)
library(ggfortify)
library(plotly)
library(ClusterR)
library(cluster)
library(factoextra)
library(GGalley)
install.packages("GGally")
library(GGally)
library(tidyverse)
library(mclust)
library(ggplot2)
library(mapdata)
library(ggfortify)
library(plotly)
library(ClusterR)
library(cluster)
library(factoextra)
############## PCA ############
PCA = prcomp(dat.scale)
autoplot(PCA,loadings=T,loadings.label=T)
# Visualize eigenvalues/variances
fviz_screeplot(PCA, addlabels = TRUE, ylim = c(0, 50))
################### K-Means ######################
fviz_nbclust(dat.scale, kmeans, method = "silhouette") + theme_classic()
wcke<-eclust(dat.scale, "kmeans", hc_metric="euclidean",k=4)
sile<-silhouette(wcke$cluster, dist(dat.scale))
fviz_silhouette(sile)
opt_gmm = Optimal_Clusters_GMM(dat.scale, max_clusters = 10, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
dat2 = center_scale(dat.scale, mean_center = T, sd_scale = T)  # centering and scaling the data
gmm = GMM(dat.scale, 6, dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
pr = predict_GMM(dat.scale, gmm$centroids, gmm$covariance_matrices, gmm$weights)
clust = df %>% select(gage,Name,CLASS,dec_lat_va,dec_long_va)
## PCA Plot
autoplot(PCA,colour = as.factor(pr$cluster_labels+1),scale = 0,loadings=T)
gmm = GMM(dat2, 6, dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
pr = predict_GMM(dat2, gmm$centroids, gmm$covariance_matrices, gmm$weights)
## PCA Plot
autoplot(PCA,colour = as.factor(pr$cluster_labels+1),scale = 0,loadings=T)
gmm = GMM(dat2, 4, dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
pr = predict_GMM(dat2, gmm$centroids, gmm$covariance_matrices, gmm$weights)
## PCA Plot
autoplot(PCA,colour = as.factor(pr$cluster_labels+1),scale = 0,loadings=T)
fviz_cluster(wcke, geom = "point", ellipse.type = "norm", ggtheme = theme_minimal())
# Visualize eigenvalues/variances
fviz_screeplot(PCA, addlabels = TRUE, ylim = c(0, 50))
pr$cluster_labels
wcke$cluster
gmm$weights
gmm$Log_likelihood
d <- df %>%
#Select vars of interest
select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "freq_local") %>%
#scale vars
scale() %>%
#Create distance matrix
vegdist(., method = 'euclidean')
library(vegan)
d <- df %>%
#Select vars of interest
select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "freq_local") %>%
#scale vars
scale() %>%
#Create distance matrix
vegdist(., method = 'euclidean')
#Use heirchal clustering
fit <- hclust(d, method = "ward")
d <- df %>%
#Select vars of interest
select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "sev") %>%
#scale vars
scale() %>%
#Create distance matrix
vegdist(., method = 'euclidean')
#Use heirchal clustering
fit <- hclust(d, method = "ward")
#After visual inspection, select where to cut the tree
df<- df %>%
mutate(
clust_3 = cutree(fit, k=4))
#After visual inspection, select where to cut the tree
df<- df %>%
mutate(
clust_4 = cutree(fit, k=4))
clust = df %>% select(gage,Name,CLASS,dec_lat_va,dec_long_va,clust_4)
clust = cbind(clust,pr$cluster_labels,wcke$cluster)
clust
clust = cbind(clust,pr$cluster_labels,wcke$cluster) %>% rename(pr$cluster_labels=gmm.clust,wcke$cluster=kmeans.clust)
clust = df %>% select(gage,Name,CLASS,dec_lat_va,dec_long_va,clust_4)
clust = cbind(clust,pr$cluster_labels,wcke$cluster)
clust %>% rename(pr$cluster_labels=gmm.clust,wcke$cluster=kmeans.clust)
clust %>% rename(pr$cluster_labels = gmm.clust,wcke$cluster = kmeans.clust)
library(dplyr)
clust %>% rename(pr$cluster_labels = gmm.clust,wcke$cluster = kmeans.clust)
clust
clust %>% rename(pr$cluster_labels = "gmm.clust",wcke$cluster = "kmeans.clust")
clust %>% dplyr::rename(.,pr$cluster_labels = "gmm.clust",wcke$cluster = "kmeans.clust")
clust %>% dplyr::rename(.,c(pr$cluster_labels = "gmm.clust",wcke$cluster = "kmeans.clust"))
clust %>% dplyr::rename(.,c("pr$cluster_labels" = "gmm.clust","wcke$cluster" = "kmeans.clust"))
rename(clust,c(pr$cluster_labels = "gmm.clust",wcke$cluster = "kmeans.clust"))
colnames(clust)
colnames(clust) = c("gage","Name","CLASS","dec_lat_va","dec_long_va","hier.4.clust","gmm.clust","kmeans.clust")
clust
## PCA Plot
autoplot(PCA,colour = as.factor(clust$hier.4.clust),scale = 0,loadings=T)
autoplot(PCA,colour = as.factor(clust$gmm.clust),scale = 0,loadings=T)
summary(clust$gmm.clust)
autoplot(PCA,colour = as.factor(clust$kmeans.clust),scale = 0,loadings=T)
library(fpc)
library(dbscan)
library(factoextra)
kNNdistplot(dat.scale,k = log(length(dat.scale)))
##################### Density Based Clustering #########################
library(fpc)
library(dbscan)
library(factoextra)
install.packages("fpc")
install.packages("dbscan")
##################### Density Based Clustering #########################
library(fpc)
library(dbscan)
library(factoextra)
kNNdistplot(dat.scale,k = log(length(dat.scale)))
db = fpc::dbscan(dat.scale,eps=.5,MinPts = log(length(dat.scale)))
fviz_cluster(db,dat.scale, stand = FALSE, ellipse = FALSE, geom = "point",show.clust.cent = T,pointsize = .5)
clust = cbind(clust,pr$cluster_labels,wcke$cluster,db$cluster)
colnames(clust) = c("gage","Name","CLASS","dec_lat_va","dec_long_va","hier.4.clust","gmm.clust","kmeans.clust","dbscan.cluster")
clust
summary(clust)
clust = df %>% select(gage,Name,CLASS,dec_lat_va,dec_long_va,clust_4)
clust = cbind(clust,pr$cluster_labels,wcke$cluster,db$cluster)
colnames(clust) = c("gage","Name","CLASS","dec_lat_va","dec_long_va","hier.4.clust","gmm.clust","kmeans.clust","dbscan.cluster")
summary(clust)
clust = cbind(clust,pr$cluster_labels+1,wcke$cluster,db$cluster+1)
clust = df %>% select(gage,Name,CLASS,dec_lat_va,dec_long_va,clust_4)
clust = cbind(clust,pr$cluster_labels+1,wcke$cluster,db$cluster+1)
colnames(clust) = c("gage","Name","CLASS","dec_lat_va","dec_long_va","hier.4.clust","gmm.clust","kmeans.clust","dbscan.cluster")
summary(clust)
######## Plots ##########
# Color scale
cols <-
c("1" = "#cf597e",
"2" = "#eeb479",
"3" = "#e9e29c",
"4" = "#39b185",
"5" = "#009392")
autoplot(PCA,colour = as.factor(clust$dbscan.cluster),scale = 0,loadings=T)
# CONUS plot
states <- map_data("state")
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_vz, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1)
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1)
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1) +
scale_color_binned()
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1) +
scale_color_discrete()
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1) +
scale_color_binned()
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1) +
scale_color_viridis_c()
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = hier.4.clust), size = 2, alpha=1) +
scale_color_viridis_c(breaks=c(0,1,2,3,4,5,6,7,8))
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = gmm.clust), size = 2, alpha=1) +
scale_color_viridis_c(breaks=c(0,1,2,3,4,5,6,7,8))
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = kmeans,clust), size = 2, alpha=1) +
scale_color_viridis_c(breaks=c(0,1,2,3,4,5,6,7,8))
CONUS_CLUST
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = kmeans.clust), size = 2, alpha=1) +
scale_color_viridis_c(breaks=c(0,1,2,3,4,5,6,7,8))
CONUS_CLUST
# Stats plot
dat.metrics = df %>% select("peak2zero","drying_rate",
"dry_date_start", "dry_dur",
"peak_quantile", "sev")
ggpairs(dat.metrics)
ggpairs(dat.metrics,
colour = clust$hier.4.clust)
ggpairs(dat.metrics,
aes(color = clust$hier.4.clust))
ggpairs(dat.metrics,
aes(color = as.factor(clust$hier.4.clust)))
ggpairs(dat.metrics,
aes(color = as.factor(clust$gmm.clust)))
ggpairs(dat.metrics,
aes(color = as.factor(clust$kmeans.clust)))
ggplot(dat.metrics,aes(x=peak2zero,y=clust$hier.4.clust,color=clust$hier.4.clust))+
geom_boxplot()
ggplot(dat.metrics,aes(x=peak2zero,group=clust$hier.4.clust,color=clust$hier.4.clust))+
geom_boxplot()
#Box plots
# plot(fit,
#      sub="Sampling Site",
#      hang=-0.5,
#      main = NULL,
#      labels = FALSE,
#      ylab="Height")
# rect.hclust(fit, k=3, border= c("#e41a1c","#377eb8", "#4daf4a"))
boxplot(peak2zero~clust_3, col=c("#e41a1c","#377eb8", "#4daf4a"), data=df, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
boxplot(dat.metrics$peak2zero~clust$hier.4.clust, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
boxplot(dat.metrics$peak2zero~clust$gmm.clust, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
boxplot(dat.metrics$peak2zero~clust$kmeans.clust, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
boxplot(dat.metrics$peak2zero~clust$dbscan.clust, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
ggplot(dat.metrics,aes(x=peak2zero,group=clust$hier.4.clust,color=clust$hier.4.clust))+
geom_boxplot(outlier.size=0)
tt = boxplot(dat.metrics$peak2zero~clust$dbscan.clust, outline=F, ylab = "Peak to Zero [days]", xlab=NULL)
library(patchwork)
gg = tt + tt
all.points =  tt + tt
tt = ggpairs(dat.metrics,
aes(color = as.factor(clust$dbscan.clust)))
all.points =  tt + tt
all.points =  tt + tt
all.points =  tt
ff= ggpairs(dat.metrics,
aes(color = as.factor(clust$kmeans.clust)))
all.points =  tt +ff
library(patchwork)
ff= ggplot()+
ggpairs(dat.metrics,
aes(color = as.factor(clust$kmeans.clust)))
ff= ggpairs(dat.metrics,
aes(color = as.factor(clust$kmeans.clust)))
ggpairs(dat.metrics,
aes(color = as.factor(clust$hier.4.clust)))
tt = ~ggpairs(dat.metrics,
aes(color = as.factor(clust$dbscan.clust)))
yy = tt+tt
# CONUS plot
states <- map_data("state")
CONUS_CLUST <- ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "gray", color = "black") +
coord_fixed(1.3, xlim = c(-124.25,-70), ylim = c(26,48.5)) +
theme_linedraw() +
geom_point(data=clust, aes(x=dec_long_va, y=dec_lat_va, shape = factor(CLASS), colour = kmeans.clust), size = 2, alpha=1) +
scale_color_viridis_c(breaks=c(0,1,2,3,4,5,6,7,8))
CONUS_CLUST
ggplotly(CONUS_CLUST)
